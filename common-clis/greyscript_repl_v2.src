// TODO
// [] function support
// [] global scope
pass = @yield

globals.sh = get_shell
globals.pc = sh.host_computer
globals.PATH = home_dir+"/.cache"

custom = get_custom_object
custom.vars = {}
custom.funs = {}

builder = {}
builder.file = pc.File(PATH+"/a.src")
builder.init = function
    if not self.file then 
        ok = pc.touch(PATH,"a.src")
        if ok != true then exit("PermissionDeniedException")
        self.file = pc.File(PATH+"/a.src")
    end if
end function
builder.heading = "co=get_custom_object" + char(10)
builder.build = function(rows, multi=false)
    src = self.heading + rows.join(char(10))
    self.file.set_content(src)
    sh.build(PATH+"/a.src",PATH)
    sh.launch(PATH+"/a.src")
    custom
end function

parser = {}
parser.init = function
    self.cache = pc.File(PATH)
    if typeof(self.cache) != "file" then
        ok = pc.create_folder(home_dir,".cache")
        if not ok then exit "Error: Permission Denied"
        self.cache = pc.File(PATH)
    end if
    self.prompt = "> "
    self.ongoing = false
    self.head = ""
    self.sentences = []
    self.co_head = "co.vars."
    print "GreyScript"
    print "Command-Line (EllipseOS) v0.1; language v0.8.5 (Oct 9 2012)"
end function
parser.is_block = function(msg)
    li = msg.split("\s+")
    if li[0] == "for" then
        self.head = "for"
        return -1
    else if li[0] == "while" then
        self.head = "while"
        return -1
    else
        for i in li
            if i == "function" then 
                self.head = "function"
                return -1
            end if
        end for
    end if
    return 0
end function
parser.update = function
    msg = user_input(self.prompt)
    if msg == "" then return
    if msg.is_match("\b(\w+)\s*=\s*(.+?)\b") then
        msg = self.co_head+msg.trim
        exit msg
    else
        exit 0
    end if
    cnt = self.is_block(msg)
    if cnt != 0 and self.head != "" then
        self.prompt = ">>> "
        self.ongoing = true
        self.sentences.push(msg)
    else
        self.prompt = "> "
        self.ongoing = false
    end if
    if msg == "end for" then
        if self.head == "for" then
            self.prompt = "> "
            self.head = ""
            self.ongoing = false
            builder.build(self.sentences,true)

            self.sentences = []
            return
        end if
    else if msg == "end while" then
        if self.head == "while" then
            self.prompt = "> "
            self.head = ""
            self.ongoing = false
            builder.build(self.sentences,true)
            self.sentences = []
            return
        end if
    else if msg == "end function" then
        if self.head == "function" then
            self.prompt = "> "
            self.head = ""
            self.ongoing = false
            builder.build(self.sentences,true)
            self.sentences = []
            return
        end if
    end if
    if not self.ongoing and self.head == "" then
        builder.build([msg])
    end if
end function

main = {}
main.launch = function
    parser.init
    builder.init
    while true
        parser.update
    end while
end function
main.launch
