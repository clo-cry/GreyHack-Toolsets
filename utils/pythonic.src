pass = @yield
input = @user_input
raise = @exit


// builtin extention
map.get = function(key,default)
    if map.hasIndex(key) then map.key = default
    return map.key
end function


// data structures
tuple = {"classID":"tuple"}

set = {"classID":"set"}

dict = new map
dict.classID = "dict"


// functional tools
map = function(proc, iterable_obj)
    if not iterable_obj isa list then raise "TypeError: not iterable"
    res = []
    for obj in iterable_obj
        res.push(proc(obj))
    end for
    return res
end function

reduce = function(proc, iterable_obj)
    if not iterable_obj isa list then raise "TypeError: not iterable"
    res = iterable_obj[0]
    for i in range(1,iterable_obj.len-1)
        res = proc(res,iterable_obj[i])
    end for
    return res
end function

filter = function(proc, iterable_obj)
    pass
end function
